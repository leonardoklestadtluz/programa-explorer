Vis√£o geral desta etapa

Anota√ß√µes

Nessa aula o Mayk mostrar√° uma vis√£o geral de tudo que vai ser√° aplicado dentro do Stage 04.

Veremos sobre l√≥gica e algoritmos utilizando a linguagem JavaScript, aplicaremos este m√≥dulo na metodologia Learn By Doing.

======================================================

Perguntando nome e mostrando mensagem

Qual a fun√ß√£o de uma vari√°vel? E como podemos declar√°-la?

Executar a√ß√µes. Esta a√ß√£o pode ser a exibi√ß√£o de um texto na janela do navegador.

Assim:

alert("Ol√°, mundo!")

======================================================

Somar dois n√∫meros

Para que serve o operador typeof  no JavaScript? Serve para revelar o tipo de um dado.

Exemplo:

let numberOne = prompt("Digite o primeiro n√∫meros")
alert(typeof numberOne)

======================================================

Opera√ß√µes matem√°ticas

Quais s√£o os operadores matem√°ticos? Exemplifique cada um deles utilizando vari√°veis.

Adi√ß√£o +
Subtra√ß√£o -
Multiplica√ß√£o *
Divis√£o /
Resto da divis√£o %

const sum = firstNumber + secondNumber
const sub = firstNumber - secondNumber
const mult = firstNumber * secondNumber
const div = firstNumber / secondNumber
const rest = firstNumber % secondNumber

=======================================================

Melhorando os Algoritmos e L√≥gica de programa√ß√£o

Nessa aula refor√ßaremos o que √© l√≥gica de programa√ß√£o e algoritmos. Traremos dicas para voc√™: Pensar, praticar, estruturar os dados e aprender a pensar olhando c√≥digos de outros devs.

---------

* L√≥gica de programa√ß√£o

* Entendendo problemas

* Pensamento cr√≠tico e l√≥gico

++++++++++++

1. PENSAR

- √© necess√°rio tempo para pensar ;
- para quem est√° come√ß√£odo este tempo √© maior ;
- √© necess√°rio evitar interrup√ß√µes ;
- para quem n√£o treinou o foco, √© muito f√°cil ser interrompido ;

+++++++++++++

2. QUESTIONAR E ENTENDER

- com as melhores perguntas, vem as melhores respostas ;
- para entender o problema, precisamos continuar perguntando at√© encontrar a solu√ß√£o ;
- para entender, precisamos aprender a ler e enterpretar o problema ;

++++++++++++++

3. PRATICAR

- quanto mais praticar, melhor vai ficar ;
- vai levar tempo! Por isso, ser√° necess√°rio paci√™ncia no processo ;
- quebrar o problema em pequenos peda√ßos e colocar no c√≥digo ;

++++++++++++++

4. ESTRUTURA DE DADOS E ALGORITMOS (conceitos te√≥ricos)

- algoritmos √© a sequ√™ncia de passos para complementar uma tarefa ;
- √© tudo sobre dados. Como manipular, guardar, exibir e capturar eles ;

++++++++++++++

5. VER C√ìDIGO

- voc√™ precisa ver c√≥digo;
- tentar entender o c√≥digo dos outros ;
- aprenderemos outras maneiras de pensar no problema ;
- aprenderemos outros algoritmos ;
- procurar explicar o que o c√≥digo est√° fazendo ;
- voc√™ vai encontrar c√≥digo bom e c√≥digo ruim ;

=======================================================

Calculando a m√©dia de um estudante

O que √© um tipo de dado Booleano? E qual o tipo de dado que ele aceita?

√â um tipo de dado que aceita somente dois valores.

True (verdadeiro) ou false (falso).

=======================================================

Criando lista de compras

O que significa o sinal ++ na programa√ß√£o?

Incrementa a vari√°vel. Adiciona mai um ao seu valor.

Assim:

item = item + 1

or

item++

=======================================================

Jogo da adivinha√ß√£o

O que significa o tipo de dado NaN?

Um dado que n√£o √© num√©rico.

=======================================================

Ganhando mais informa√ß√µes sobre a linguagem com ajuda do VS Code

Nessa aula ser√° apresentado uma funcionalidade do VS Code para dar mais clareza sobre as aplica√ß√µes que est√£o sendo constru√≠das e como o VS Code pode te ajudar daqui pra frente.

=======================================================

Interagindo com um menu de op√ß√µes - parte 1

O que faz o m√©todo .push em um array no JavaScript?

Serve para adicionar dados.

=======================================================

Interagindo com um menu de op√ß√µes - parte 2

O que faz a instru√ß√£o break na condicional Switch?

=======================================================

Estruturando dados com Objetos

O que √© um objeto no JavaScript?

√â uma representa√ß√£o de algo do mundo real. Este objeto possu√≠ propriedades como: nome, idade, altura, etc..

=======================================================

Calculando IMC dos pacientes com Fun√ß√µes

Crie uma fun√ß√£o de exemplo que precise de argumentos e retorne algo.

function printPatinetIMC(patient) {
  return `
  Paciente ${patient.name} possu√≠ o IMC de ${(patient.weight / ((patient.height / 100) **2)).toFixed(2)} `
}

=======================================================

Mais conceitos, revis√£o, finaliza√ß√£o e pr√≥ximos passos

Anota√ß√µes

# O que aprendemos?

Muita l√≥gica e algoritmos

- sintaxe e boas pr√°ticas
    
    ```jsx
    // ponto e v√≠rgula √© facultativo
    const myConst = "constante"
    
    // escrever com calmelCase
    const myConst2 = "constante2"
    
    // procurar escrever c√≥digo em ingl√™s 
    // para treinar, aumentar as oportunidades futuras
    function doSomething(myArgument) {}
    ```
    
- vari√°veis
    
    ```jsx
    const
    let
    var
    ```
    
- tipos de dados
    
    ```jsx
    String 
    Number
    Boolean
    undefined  
    null
    ```
    
- estrutura de dados
    
    ```jsx
    // Array
    const myArray = [1, 2, "a", "b", true]
    
    // Object
    const myObject = { property: "value" }
    ```
    
- fun√ß√µes
    
    ```jsx
    // 1. Cria√ß√£o e tipos de fun√ß√µes
    // named
    function myFunction() {}
    
    // Anonymous
    const myFunction = function() {}
    
    // Arrow
    const myFunction = () => {}
    
    // arguments & return
    function sum(a, b) {
    	return a + b
    }
    
    const sum = (a, b) => a + b
    
    // 2. Excecu√ß√£o
    myFunction()
    sum(1, 2)
    ```
    
- fluxo da aplica√ß√£o
    
    ```jsx
    // if, else if, else
    const isRainning = true
    if (isRainning) {
    	alert("Est√° chovendo, pega o guarda chuvas üåß")
    } else {
    	alert("Dia limpo ‚õÖÔ∏è")
    }
    
    // switch
    const water = "com g√°s"
    
    switch(water) {
    	case "com g√°s": 
    		alert("Essa √°gua √© com g√°s")
    		break
    	case "sem g√°s":
    		alert("Essa √°gua √© sem g√°s")
    		break
    	case "da fonte":
    		alert("√Ågua fresquiha da fonte")
    		break	
    	default:
    		alert("cad√™ minha √°gua?")
    }
    ```
    
- estrutura de repeti√ß√£o
    
    ```jsx
    // while
    let play = true
    while(play) {
    	// fazer algo at√© o play ser falso
    	// criar uma l√≥gica para o play se tornar falso
    	// se n√£o, loop eterno
    }
    
    // for (tradicional)
    let text = "abc"
    for (let i = 0; i < text.length; i++){
    	alert(text[i])
    }
    
    // for..of
    for (let char of text) {
    	alert(char)
    }
    ```
    
- operadores
    
    ```jsx
    () // group operator - agrupamento
    
    // matem√°ticos
    * // multiplica√ß√£o
    ** // exponecia√ß√£o
    / // divis√£o
    % // resto da divis√£o
    + // soma
    - // subtra√ß√£o
    
    // l√≥gicos
    && // E l√≥gico 
    || // OU l√≥gico
    ! // N√£o l√≥gico
    
    // compara√ß√£o - relacional
    > // maior
    < // menor
    >= // maior igual
    <= // menor igual
    == // igualdade
    === // igual no valor e do mesmo tipo (estritamente igual)
    != // desigualdade
    !== // diferente do valor ou do tipo (estritamente diferente)
    
    // Atribui√ß√£o
    = // atribui√ß√£o de valor
    *= // multiplica√ß√£o e atribui√ß√£o de valor 
    /= // divis√£o e atribui√ß√£o de valor
    += // soma e atribui valor
    -= // diminui e atribui
    
    // outros operadores/express√µes
    
    typeof // tipo do dado
    ++ // incremento
    -- // decremento
    {} // objeto vazio ou bloco de c√≥digo
    [] // array vazio
    , // separa elementos de um array, objeto ou cria√ß√£o de multiplas vari√°veis
    ```
    

# Pr√≥ximos passos

Fazer os desafios e quizzes

Revisar sempre que perceber que n√£o entendeu algo, ou n√£o conseguiu resolver o desafio, pois:

1. Revis√£o √© o caminho pra entender algo que ainda n√£o foi compreendido
2. Algumas vezes a resposta est√° em algo que j√° foi falado, mas passou desapercebido nas primeiras vezes

Caso deseje saber mais JS, d√™ uma olhada nos conte√∫dos de JavaScript do Discover, pois l√° voc√™ poder√° aprender por **conceitos** *learn by concepts*

























